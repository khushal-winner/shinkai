// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  clerkUserId String    @unique
  email       String    @unique
  name        String?
  imageUrl    String?
  industry    String?  // combined industry and subindustry for ex "IT-Software"
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  //Profile fields
bio         String?
  experience  Int?
  skills      String[]

  // Relations
  coverLetters   CoverLetter[]
  resume        Resume?
  assessments   Assessment[]
  
}


model IndustryInsight {
  id           String    @id @default(cuid())
  industry     String    @unique

  // user
  users        User[]
  

  // salary data
  salaryRanges Json[]
  
  //  Industry Trends
  growthRate  Float     // yearly growth rate
  demandLevel DemandLevel     // "high", "medium", "low"
  topSkills    String[]   // array of top skills

  // Market Conditions
  marketOutlook MarketOutlook     // "positive", "neutral", "negative"
  keyTrends     String[]   // array of key trends

  // Learning Suggestions
  recommendedSkills String[]   // array of recommended for the industry
  
  lastUpdated DateTime  @default(now())
  nextUpdatedAt   DateTime  

  @@index([industry])
}

model Assessment {
  id          String    @id @default(cuid())
  userId      String    
  user        User      @relation(fields: [userId], references: [id])
  quizScore   Float     // overall score
  questions   Json[]    // array of question objects ex. [{question: "Question 1", answer: "Answer 1"}, {question: "Question 2", answer: "Answer 2"}]
  category    String  // "resume", "coverLetter", "interview"
  improvementTip String? // ex. "Resume: Add more experience to your resume."
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt


  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text // markdown
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model CoverLetter {
  id                String    @id @default(cuid())
  userId            String    
  user              User      @relation(fields: [userId], references: [id])
  content           String    @db.Text // markdown
  jobDescription    String?
  companyName       String
  jobTitle          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
}



enum DemandLevel {
  HIGH 
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}